#ifndef SOLVER_BASE_HALO
#define SOLVER_BASE_HALO

//include other modules
#include "../utils/include.halo"
#include "../geometry/include.halo"
#include "../include.halo"
#include "../defn.halo"
#include "defn.halo"

class Solver{
  
public:
  int Nx, Ny;
  int Nb;
  double t, tf, dt;
  Domain domain;
  int btype[4];
  cvariables freestream[4];
  double maxspeed;
  double minlength;
  double cfl;
  void setup(Domain domain);
  void setBoundary(int bottom, int right, int top, int left);
  void setTime(double t);
  void setFreestream(int boundary, cvariables freestream);
  void applyBoundaryConditions(void);
  void calcFlux(int i, int j);
  void loopDomain(void);
  void advanceTime(void);
  void loopTime(void);
  void calcDt(void);
  void checkGarbage(void);
};


void Solver::setup(Domain idomain){
  std::cout<<"Solver Setup";
  maxspeed = 0.0;
  minlength = 1000.0;
  cfl = 0.8;
  domain = idomain;
  Nb = domain.boundary_cell;
  Nx = domain.Nx;
  Ny = domain.Ny;
  checkGarbage();
  std::cout<<"setup done";
}

void Solver::setBoundary(int bottom, int right, int top, int left){
  btype[0] = bottom;
  btype[1] = right;
  btype[2] = top;
  btype[3] = left;
}

void Solver::setTime(double t){
  tf = t;
}

void Solver::setFreestream(int boundary, cvariables ifreestream){
  freestream[boundary] = ifreestream;
}


void Solver::applyBoundaryConditions(void){
  if(DEBUG){std::cout<<"Boundary conditions"<<std::endl;}

  // bottom boundary
  for(int i=0; i< Nx; i++){
    for(int j=0; j< Nb; j++){
      cvariables bstate{0.0};
      switch(btype[0]){
      case FREESTREAM:
	bstate = freestream[0];
	break;
      case OUTFLOW:
	bstate = domain.cell[i][Nb].cstate;
	break;
      }
      domain.cell[i][j].cstate = bstate;
    }
  }

  // right boundary
  for(int i=Nx-Nb; i< Nx; i++){
    for(int j=0; j< Ny; j++){
      cvariables bstate{0.0};
      switch(btype[1]){
      case FREESTREAM:
	bstate = freestream[1];
	break;
      case OUTFLOW:
	bstate = domain.cell[Nx-Nb-1][j].cstate;
	break;
      }
      domain.cell[i][j].cstate = bstate;
    }
  }

  // top boundary
  for(int i=0; i< Nx; i++){
    for(int j=Ny-Nb; j< Ny; j++){
      cvariables bstate{0.0};
      switch(btype[2]){
      case FREESTREAM:
	bstate = freestream[2];
	break;
      case OUTFLOW:
	bstate = domain.cell[i][Ny-Nb-1].cstate;
	break;
	
      }
      domain.cell[i][j].cstate = bstate;
    }
  }

  // left boundary
  for(int i=0; i< Nb; i++){
    for(int j=0; j< Ny; j++){
      cvariables bstate{0.0};
      switch(btype[3]){
      case FREESTREAM:
	bstate = freestream[3];
	break;
      case OUTFLOW:
       	bstate = domain.cell[Nb][j].cstate;
	break;
	
      }
      domain.cell[i][j].cstate = bstate;
    }
  }

}

void Solver::checkGarbage(void){
  for(int i=0;i<Nx;i++){
    for(int j=0;j<Ny;j++){
      scell c = domain.cell[i][j];
      //      std::cout<<i<<" "<<j<<" "<<c.cstate.rho<<"check garbeg"<<"\n";
      assert(c.cstate.rho != 0);
      assert(c.cstate.E > 0);
    }
  }
}

void Solver::calcFlux(int i, int j){
  cvariables UL, UR, U_avg;
  vector VL, VR;
  scell cL, cR;
  vector uL, uR;
  vector fL, fR, f;                      /// left and right flux in characteristic form

  cL = domain.cell[i][j];         /// Left Cell
  UL = cL.cstate;    /// Converting the states into conservative 
  f = flux(UL, cL.normal[1]);
  uL = convert(UL);
  
  for(int boundary=0; boundary<4; boundary++){
    eigensystem sysl = mhd::calc(UL, cL.normal[boundary]);
    cR = domain.cell[i+iindex(boundary)][j+jindex(boundary)];         /// Right Cell
    UR = cR.cstate;
    U_avg = average(UL, UR, 1);     /// Taking average of states
    /// average function in utility/mhd.halo
    eigensystem sys = mhd::calc(U_avg, cL.normal[boundary]);      /// Calculating the eigensystems
    /// definition of eigensystem in utility/defn.halo
    eigensystem sysr = mhd::calc(UR, cL.normal[boundary]);

    VL = sys.L*uL;
    fL = sys.L*f;
    uR = utils::convert(UR);
    VR = sys.L*uR;
    f = mhd::flux(UR, cR.normal[3]);
    fR = sys.L*f;
    
    //Applying the Roe's Flux Formulation:-
    uL = sys.R*VL;
    uR = sys.R*VR;
    vector FL, FR;
    FL = sys.R*fL;
    FR = sys.R*fR;

    // calculate wavestrength
    vector U_diff, ws;
    U_diff = uR - uL;
    ws = sys.L*U_diff;
    
    // harten entropy fix
    vector rest;
    for (int k = 0; k < 8; k++){
      double fix, delta;
      double evalue = sys.direction[k].eigenvalue;
      double eps = 4*(sysr.direction[k].eigenvalue - sysl.direction[k].eigenvalue);
      delta = eps > SMALL ? eps : SMALL;
      fix = mod(evalue) >= (delta/2) ? mod(evalue) : (evalue*evalue / delta) + (delta / 4);
      ws.v[k] *= fix;
    }
    rest = ws*sys.R;
    
    vector flu;
    for (int k = 0; k < 8; k++){
      flu.v[k] = (FL.v[k] + FR.v[k]) / 2 - rest.v[k]/2;
      if(flu.v[k] != 0){
	// std::cout<<i<<" "<<j<<" "<<flu[k]<<"F"<<"\n";
      }
      }
    
    //std::cout<<cL.facelength[boundary]<<"\n";
    for (int k = 0; k < 8; k++)	{
      domain.cell[i][j].F[boundary].v[k] = flu.v[k]*domain.cell[i][j].facelength[boundary];
      maxspeed = math::max(math::mod(sys.direction[k].eigenvalue), maxspeed);
    } 
    minlength = math::min(math::mod(domain.cell[i][j].facelength[boundary]), minlength);
  }

  for(int m=0; m < 8; m++){
    domain.cell[i][j].residue.v[m] = 0.0;
    for(int k=0; k < 4; k++){
      domain.cell[i][j].residue.v[m] += domain.cell[i][j].F[k].v[m];
    }
    domain.cell[i][j].residue.v[m] /= domain.cell[i][j].area;
    if(DEBUG){
      if(domain.cell[i][j].residue.v[m]!=0){
	std::cout<<i<<" "<<j<<" "<<domain.cell[i][j].residue.v[m]<<"RESIDUE\n";
      }
	//assert(cL.residue[m] != 0);
    }
  }
}

void Solver::loopDomain(void){
  for(int i = Nb; i < Nx-Nb; i++){
    for(int j = Nb; j < Ny-Nb; j++){
      calcFlux(i, j);
    }
  }
}

void Solver::calcDt(void){
  dt = cfl*minlength/maxspeed;
  std::cout<<"calc dt"<<" "<<maxspeed<<" "<<minlength<<" "<<dt<<" "<<std::endl;
}

void Solver::advanceTime(void){
  if(DEBUG){std::cout<<"Advance time"<<std::endl;}

  for(int i = Nb; i < Nx-Nb; i++){
    for(int j = Nb; j < Ny-Nb; j++){
      
      domain.cell[i][j].cstate.rho += domain.cell[i][j].residue.v[0]*dt;
      domain.cell[i][j].cstate.rhou += domain.cell[i][j].residue.v[1]*dt;
      domain.cell[i][j].cstate.rhov += domain.cell[i][j].residue.v[2]*dt;
      domain.cell[i][j].cstate.rhow += domain.cell[i][j].residue.v[3]*dt;
      domain.cell[i][j].cstate.Bx += domain.cell[i][j].residue.v[4]*dt;
      domain.cell[i][j].cstate.By += domain.cell[i][j].residue.v[5]*dt;
      domain.cell[i][j].cstate.Bz += domain.cell[i][j].residue.v[6]*dt;
      domain.cell[i][j].cstate.E += domain.cell[i][j].residue.v[7]*dt;
      //      std::cout<<domain.cell[i][j].cstate.rho<<std::endl;
    }
  }
}

void Solver::loopTime(void){
  t = 0.0;
  while(t < tf){
    checkGarbage();
    applyBoundaryConditions();
    loopDomain();
    calcDt();
    advanceTime();
    t += dt;
    std::cout<<t<<"\n";
  }
  domain.write_domain_file();
}


#endif
