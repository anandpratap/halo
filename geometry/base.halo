#ifndef GEOMETRY_BASE_HALO
#define GEOMETRY_BASE_HALO
//include utils
#include "../utils/base.halo"
#include <fstream>
#include <iostream>
#define max_nx 100
#define max_ny 100
#define default_l 1.0
#define pi 3.14
//maximum number of cell the code can handle at this point a 500x500
//you will need to hard code the above values to change this behaviour
//
//        |-------|-------|-------|
//        |       |       |       |
//        |i-1,j+1| i,j+1 |i+1,j+1|
//        |       |       |       |
//        |-------|-------|-------|
//        |       |       |       |
//        | i-1,j |  i,j  | i+1,j |
//        |       |       |       |
//        |-------|-------|-------|
//        |       |       |       |
//        |i-1,j-1| i,j-1 |i+1,j-1|
//        |       |       |       |
//        |-------|-------|-------|
//
//[i,j]th cell will exchange fluxes with [i,j-1], [i+1,j], [i,j+1], [i-1,j]
//starting from bottom and moving in counter clockwise direction
//we will use them in this sequence wherever required
//
//[i,j]th cell will have corner points given by index [i,j], [i+1,j], [i+1,j+1], [i,j+1]
//starting from left bottom in counter clockwise direction
//we wil preserve the same sequence, werever required
class Domain{
public:
  //initializing variable corresponding to x, y coordiated for cell and corner points
  double xc[max_nx][max_ny] = {};
  double yc[max_nx][max_ny] = {};
  double x[max_nx+1][max_ny+1] = {};
  double y[max_nx+1][max_ny+1] = {};
  double nx[max_nx][max_ny][4] = {};
  double ny[max_nx][max_ny][4] = {};
  //!!!!!!!!!!!delete next two line, these are just for testing info
  double xnx[max_nx][max_ny][4] = {};
  double yny[max_nx][max_ny][4] = {};

  int Nx, Ny;
  //state properties of cell
  //Euler in 2D uses only 4 while ideal MHD uses 8
  state cellstate[max_nx][max_ny] = {};
  //for declaretion of state in utils/base.halo
  //0 -> density
  //1 -> u
  //2 -> v
  //3 -> w
  //4 -> Bx
  //5 -> By
  //6 -> Bz
  //7 -> p
  //8,9 are redundant can be used in future for other purposes
  
  //set the size of the domain
  void set_size(int iNx, int iNy){Nx=iNx;Ny=iNy;}
  //calc coordinates
  virtual void calc_coordinates(void);
  void calc_centroid(void);
  void calc_normal(void);
  void init(void);
  void write_file(void);
  void setup(void);
}; 
 

//default calc coordinates makes a square domain of size 1
void Domain::calc_coordinates(void){
  double dx = default_l/Nx;
  double dy = default_l/Ny;
  for(int i=0;i<Nx+1;i++){
    for(int j=0;j<Ny+1;j++){
      x[i][j] = i*dx;
      y[i][j] = j*dy;
    }
  }    
}

void Domain::calc_centroid(void){
  for(int i=0;i<Nx;i++){
    for(int j=0;j<Ny;j++){
      xc[i][j] = 0.25*(x[i][j] + x[i+1][j] + x[i+1][j+1] + x[i][j+1]);
      yc[i][j] = 0.25*(y[i][j] + y[i+1][j] + y[i+1][j+1] + y[i][j+1]);
    }
  }    
}

void Domain::calc_normal(void){
  double tnx, tny, tn;
  for(int i=0;i<Nx;i++){
    for(int j=0;j<Ny;j++){
      for(int k=0;k<4;k++){
	if(k==0){
	  tnx = (y[i+1][j] - y[i][j]);
	  tny = -(x[i+1][j] - x[i][j]);
	  //!!!!!!!!!!!delete next two line, these are just for testing info
	  xnx[i][j][k] = x[i+1][j] + x[i][j];
	  yny[i][j][k] = y[i+1][j] + y[i][j];
	}
	if(k==1){
	  tnx = (y[i+1][j+1] - y[i+1][j]);
	  tny = -(x[i+1][j+1] - x[i+1][j]);
	  //!!!!!!!!!!!delete next two line, these are just for testing info
	  xnx[i][j][k] = x[i+1][j+1] + x[i+1][j];
	  yny[i][j][k] = y[i+1][j+1] + y[i+1][j];

	}
	if(k==2){
	  tnx = (y[i][j+1] - y[i+1][j+1]);
	  tny = -(x[i][j+1] - x[i+1][j+1]);
	  //!!!!!!!!!!!delete next two line, these are just for testing info
	  xnx[i][j][k] = x[i+1][j+1] + x[i][j+1];
	  yny[i][j][k] = y[i+1][j+1] + y[i][j+1];
	
	}
	if(k==3){
	  tnx = (y[i][j] - y[i][j+1]);
	  tny = -(x[i][j] - x[i][j+1]);
	  //!!!!!!!!!!!delete next two line, these are just for testing info
	  xnx[i][j][k] = x[i][j] + x[i][j+1];
	  yny[i][j][k] = y[i][j] + y[i][j+1];
	
	}
	tn = sqrt(tnx*tnx + tny*tny);
	nx[i][j][k] = tnx/tn;
	ny[i][j][k] = tny/tn;
      }
    }
  }    
}


void Domain::init(void){
  for(int i=0;i<Nx;i++){
    for(int j=0;j<Ny;j++){
      //density
      cellstate[i][j][0] = 1.111111111111111111;
      //u
      cellstate[i][j][1] = 1.0;
      //p
      cellstate[i][j][7] = 1.0;
    }
  }
}

void Domain::write_file(void){
  std::ofstream grid("grid.dat");
  grid.precision(15);
  for(int i=0;i<Nx+1;i++){
    for(int j=0;j<Ny+1;j++){
      grid<<x[i][j]<<" "<<y[i][j]<<"\n";
    }
  }
  grid.close();
  std::ofstream domain("domain.dat");
  domain.precision(15);
  for(int i=0;i<Nx;i++){
    for(int j=0;j<Ny;j++){
      domain<<" "<<xc[i][j]<<" "<<yc[i][j]<<" ";
      for(int k=0;k<4;k++){
	domain<<nx[i][j][k]<<" "<<ny[i][j][k]<<" ";
      }
      //!!!!!!!!!!!delete next two line, these are just for testing info
      for(int k=0;k<4;k++){
	domain<<xnx[i][j][k]<<" "<<yny[i][j][k]<<" ";
      }

      

      for(int k=0;k<10;k++){
	domain<<cellstate[i][j][k]<<" ";
      }
      domain<<"\n";
    }
  }
  domain.close();
}



void Domain::setup(void){
  calc_coordinates();
  calc_centroid();
  calc_normal();
  init();
  write_file();
}

#endif
